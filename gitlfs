#!/usr/bin/python3 -u

# Author: Russ Webber <russ.webber@greenroomrobotics.com>

import time
import sys
import os
import logging
import traceback
import urllib.parse
import re
from urllib.parse import urlparse
from pathlib import Path
import subprocess

APT_CACHE_PATH = Path("/var/cache/apt")
GITLFS_APT_CACHE_PATH = APT_CACHE_PATH / "gitlfs"
LFS_OBJECTS = Path(".git/lfs/objects")


class APTMessage(object):
    MESSAGE_CODES = {
        100: 'Capabilities',
        102: 'Status',
        200: 'URI Start',
        201: 'URI Done',
        400: 'URI Failure',
        600: 'URI Acquire',
        601: 'Configuration',
    }

    def __init__(self, code, headers):
        self.code = code
        self.headers = headers

    def encode(self):
        result = '{0} {1}\n'.format(self.code, self.MESSAGE_CODES[self.code])
        for item in list(self.headers.keys()):
            if self.headers[item] is not None:
                result += '{0}: {1}\n'.format(item, self.headers[item])
        return result + '\n'


class APTTransport:
    def __init__(self):
        self.__eof = False

    def read_message(self):
        """
        Apt uses for communication with its methods the text protocol similar
        to http. This function parses the protocol messages from stdin.
        """
        if self.__eof:
            return None
        result = {}
        line = sys.stdin.readline()
        while line == '\n':
            line = sys.stdin.readline()
        if not line:
            self.__eof = True
            return None
        s = line.split(" ", 1)
        result['_number'] = int(s[0])
        result['_text'] = s[1].strip()

        while not self.__eof:
            line = sys.stdin.readline()
            if not line:
                self.__eof = True
                return result
            if line == '\n':
                return result
            (item, value) = line.split(":", 1)
            if not result.get(item):
                result[item] = []
            result[item].append(value.strip())
        return result

    def send(self, code, headers):
        message = APTMessage(code, headers)
        sys.stdout.write(message.encode())

    def send_capabilities(self):
        self.send(100, {
            'Version': '1.1',
            'Single-Instance': 'true',
            'Send-Config': 'true'})

    def send_status(self, headers):
        self.send(102, headers)

    def send_uri_start(self, headers):
        self.send(200, headers)

    def send_uri_done(self, headers):
        self.send(201, headers)

    def send_uri_failure(self, headers):
        self.send(400, headers)


class GitLFSRepo:
    @staticmethod
    def clone(git_uri: str, checkout_path: Path):
        GITLFS_APT_CACHE_PATH.mkdir(exist_ok=True)
        proc = subprocess.run(['git', 'clone', git_uri, checkout_path], env={'GIT_TERMINAL_PROMPT': '0'},
                              cwd=GITLFS_APT_CACHE_PATH, capture_output=True, check=True)
        # TODO this should return correct error in apt instead of 404
        return GitLFSRepo(checkout_path)

    @staticmethod
    def checksum(hash_bin: str, file_path: Path):
        proc = subprocess.run([hash_bin, file_path], capture_output=True, check=True)
        cs, _ = proc.stdout.decode('utf8').split(" ", 1)

        return cs

    @staticmethod
    def read_lfs_pointer(path: Path):
        try:
            with path.open('rt', encoding='ascii') as f:
                if not f.readline().strip().startswith("version https://git-lfs.github.com/spec/v"):
                    return None

                k, v = f.readline().strip().split(':')
                if k != 'oid sha256':
                    return None

                return v
        except UnicodeDecodeError as e:
            return None

    def __init__(self, path: Path):
        self.repo_root_path = path

        if not (path / ".git").exists():
            raise RuntimeError("Given path is not a git repository")

        if not (path / ".git" / "lfs").exists():
            self.lfs_init()

    def git_reset_hard(self):
        subprocess.run(['git', 'reset', '--hard'], cwd=self.repo_root_path, capture_output=True)

    def git_lfs_pull(self, filename: Path):
        # TODO needs to check if the user == root otherwise skip

        p = subprocess.run(['git', 'lfs', 'pull', '-X', '', '-I', str(filename)], cwd=self.repo_root_path, capture_output=True)
        if p.returncode != 0:
            raise RuntimeError(f"Failed to git-pull: {p.stderr}")

        logging.debug(f"stdout: {p.stdout}\nstderr: {p.stderr}")

    def git_pull(self):
        # TODO needs to check if the user == root otherwise skip
        logging.debug(f"Working dir: {Path.cwd()}")
        logging.debug(f"UID: {subprocess.run(['/usr/bin/id'], capture_output=True).stdout.decode('utf8')}")

        p = subprocess.run(['git', 'pull'], cwd=self.repo_root_path, capture_output=True)
        if p.returncode != 0:
            raise RuntimeError(f"Failed to git-pull: {p.stderr}")

    def lfs_init(self):
        p = subprocess.run(['git', 'lfs', 'install'], cwd=self.repo_root_path, capture_output=True)
        if p.returncode != 0:
            raise RuntimeError(f"Failed to git-lfs-install: {p.stderr}")

    def lfs_fetch_path(self, filename: Path):
        logging.debug(f"Running fetch for {filename}")
        p = subprocess.run(['git', 'lfs', 'fetch', '-I', str(filename)], cwd=self.repo_root_path, capture_output=True)
        if p.returncode != 0:
            raise RuntimeError(f"Failed to git-lfs-fetch: {p.stderr}")

    def resolve_lfs_path(self, file_path: Path):
        repo_file_path = self.repo_root_path / file_path

        if not repo_file_path.is_file():
            return None

        cs = GitLFSRepo.read_lfs_pointer(repo_file_path)

        if cs is None:
            # file is not a lfs pointer
            return repo_file_path
        else:
            return self.repo_root_path / LFS_OBJECTS / cs[0:2] / cs[2:4] / cs


def split_uri_by(s: str, needle: str):
    part1 = []
    parts = list(Path(s).parts)

    while True:
        p = parts.pop(0)
        part1.append(p)
        if p.endswith(needle):
            break

    return Path(*part1), Path(*parts)


def sanitise_uri(s: str):
    s = s.replace('https://', '')
    s = s.replace(':', '_')
    s = re.sub('^git@', '', s)
    return s.replace('/', '_')


class GitLFSMethod:
    def __init__(self):
        self.transport = APTTransport()
        self.transport.send_capabilities()
        self.repos = {}

    def fail(self, uri, message='Failed'):
        self.transport.send_uri_failure({'URI': uri, 'Message': message})

    def run(self):
        """Loop through requests on stdin"""
        while True:
            message = self.transport.read_message()
            if message is None:
                return 0
            if message['_number'] == 601:
                try:
                    self.configure(message)
                except Exception as e:
                    logging.error(traceback.format_exc())
                    self.fail(message['URI'][0], e.__class__.__name__ + ": " + str(e))
            elif message['_number'] == 600:
                try:
                    self.fetch(message)
                except Exception as e:
                    logging.error(traceback.format_exc())
                    self.fail(message['URI'][0], e.__class__.__name__ + ": " + str(e))
            else:
                self.fail(message['URI'][0], str(message['_text']))

    def configure(self, message):
        """
        Reads APT configuration (dict) and checks for proxy settings by reading
        all available options with in 'Config-Item' and lookinup
        'Acquire::http::Proxy'
        """
        for item in message['Config-Item']:
            if item.startswith('Acquire::http::Proxy'):
                (key, value) = item.split('=', 1)
                if key == 'Acquire::http::Proxy':
                    os.environ['http_proxy'] = value
                    os.environ['https_proxy'] = value


    @staticmethod
    def uri_to_git(uri: urllib.parse.ParseResult):
        out = ""
        file_path = None

        if uri.scheme == 'gitlfs+https':
            path1, file_path = split_uri_by(uri.path, '.git')
            out = f"https://{uri.netloc}{path1}"

        elif uri.scheme == "gitlfs+git":
            path1, file_path = split_uri_by(uri.path, '.git')
            # sources.list doesn't support : in URIs
            path1 = str(path1)
            assert path1[0] == '/'
            path1 = ':' + path1[1:]
            out = f"{uri.netloc}{path1}"

        return out, file_path

    def fetch(self, msg):
        logging.debug(f"APT Message: {msg}")
        uri = urlparse(msg['URI'][0])
        output_filename = msg['Filename'][0]
        git_uri, requested_file_path = self.uri_to_git(uri)
        repo_path = GITLFS_APT_CACHE_PATH / sanitise_uri(git_uri)

        repo = self.repos.get(git_uri, None)

        if repo is None:
            # haven't seen this uri this session, so we should refresh or clone it
            self.transport.send_status({'URI': msg['URI'][0], 'Message': 'Waiting for headers'})

            if repo_path.exists():
                repo = GitLFSRepo(repo_path)
                repo.git_reset_hard()
                repo.git_pull()
            else:
                repo = GitLFSRepo.clone(git_uri, repo_path)

            self.repos[git_uri] = repo

        lfs_file_path = repo_path / requested_file_path

        if not lfs_file_path.is_file():
            self.transport.send_uri_failure({
                'URI': msg['URI'][0],
                'Message': f'Filename is not in git repository',
                'FailReason': 'HttpError404'})
            return

        self.transport.send_status({
            'URI': msg['URI'][0],
            'Message': 'Waiting for headers'})
        repo.git_lfs_pull(requested_file_path)

        logging.debug(f"Copying {lfs_file_path} --> {output_filename}")
        subprocess.run(['cp', lfs_file_path, output_filename], capture_output=True, check=True)

        file_size = os.path.getsize(lfs_file_path)
        hash_sha256 = GitLFSRepo.checksum('sha256sum', lfs_file_path)
        hash_sha512 = GitLFSRepo.checksum('sha512sum', lfs_file_path)
        hash_md5 = GitLFSRepo.checksum('md5sum', lfs_file_path)

        #  <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT
        last_modified = time.strftime("%a, %d %b %Y %H:%M:%S GMT", time.gmtime(os.path.getmtime(lfs_file_path)))

        self.transport.send_uri_start({
            'URI': msg['URI'][0],
            'Size': file_size,
            'Last-Modified': last_modified
        })

        self.transport.send_uri_done({
            'URI': msg['URI'][0],
            'Filename': output_filename,
            'Size': file_size,
            'Last-Modified': last_modified,
            'MD5-Hash': hash_md5,
            'MD5Sum-Hash': hash_md5,
            'SHA256-Hash': hash_sha256,
            'SHA512-Hash': hash_sha512
        })


if __name__ == '__main__':
    try:
        logging.getLogger().setLevel(logging.INFO)
        method = GitLFSMethod()
        ret = method.run()
        sys.exit(ret)
    except KeyboardInterrupt:
        pass
